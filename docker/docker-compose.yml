version: "3.11"

services:
  ai:
    image: ghcr.io/mostlygeek/llama-swap:cpu
    container_name: ai
    volumes:
    - ./llm.yaml:/app/config.yaml
    - ./volumes/models:/models
    - ~/.aws:/root/.aws
    command: ["--config=/app/config.yaml", "--listen", ":8000", "--watch-config"]
    ports:
    - "8111:8000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health/liveliness || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
    - rag

  # Document Parser
  doc-parser:
    image: ghcr.io/docling-project/docling-serve-cpu:main
    container_name: doc-parser
    ports:
      - "9999:8000"
    environment:
      - UVICORN_HOST=0.0.0.0
      - UVICORN_PORT=8000
      - NUM_WORKERS=2
      - DOCLING_SERVE_ENABLE_UI=true
    restart: always
    networks:
      - rag

  # Text Embedding Service
  postgres:
    image: pgvector/pgvector:pg17
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/rag/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: cocoindex
      POSTGRES_USER: cocoindex
      POSTGRES_DB: cocoindex
    restart: always
    networks:
      - rag

#  # Vector Database
#  qdrant:
#    image: qdrant/qdrant:latest
#    container_name: qdrant
#    ports:
#      - "6333:6333"
#      - "6334:6334"
#    expose:
#      - 6333
#      - 6334
#      - 6335
#    configs:
#      - source: qdrant_config
#        target: /qdrant/config/production.yaml
#    volumes:
#      - ./volumes/rag/qdrant:/qdrant/storage
#    restart: always
#    networks:
#      - rag

# === Network ===
networks:
  rag:
    name: rag
    driver: bridge

configs:
  qdrant_config:
    content: |
      log_level: INFO
